#!/usr/bin/env python3

import os
import sys
import glob
import shutil


os.chdir(os.path.join(os.path.dirname(__file__), '..'))

to_remove = [
    'node_modules',
    'dist',
    '*.lock',
    '.venv',
    'prod',
    '__pycache__',
    '*.log',
    'requirements.txt'
]
import argparse


def main():

    parser = argparse.ArgumentParser(
        description="Backup script for VMware ESXi")

    parser.add_argument(
        '-d',
        '--docker',
        dest='docker',
        nargs='?',
        const=True,
        default=False,
        help='Clean Docker images and containers'
    )

    parser.add_argument(
        '-p',
        '--poetry',
        dest='poetry',
        nargs='?',
        const=True,
        default=False,
        help='Clean poetry venvs'
    )

    parser.add_argument(
        '-o',
        '--other',
        dest='other',
        nargs='?',
        const=True,
        default=False,
        help='Clen garbage files'
    )

    parser.add_argument(
        '-a',
        '--all',
        dest='all',
        nargs='?',
        const=True,
        default=False,
        help='Clen all'
    )

    args = parser.parse_args()

    if args.all or len(sys.argv) == 1:
        clean_docker()
        clean_poetry()
        clean_other()
        exit()

    if args.docker:
        clean_docker()

    if args.poetry:
        clean_poetry()

    if args.other:
        clean_other()


def clean_docker():
    os.system('docker container rm clip clip-ws')
    os.system('docker image rm parisius/clip clip-ws')


def clean_poetry():
    os.system('rm -rf ~/.cache/pypoetry/virtualenvs/*clip*')


def clean_other():
    for to_match in to_remove:
        matched_lst = glob.glob(os.path.join('**', to_match), recursive=True)
        for matched in matched_lst:

            if os.path.isdir(matched):
                print(f'removing {matched}')
                shutil.rmtree(matched)

            if os.path.isfile(matched):
                print(f'removing {matched}')
                os.remove(matched)


if __name__ == '__main__':
    main()